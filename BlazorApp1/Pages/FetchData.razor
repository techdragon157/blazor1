@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        <Loading IsLoading="forecasts is null">
            @if (forecasts is not null)
            {
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            }
        </Loading>
    </tbody>
</table>

@code {
    private IEnumerable<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(4000); // delay to simulate large data load
        forecasts = await GetWeatherForcastData();
    }

    private async Task<IEnumerable<WeatherForecast>> GetWeatherForcastData()
    {
        return await Http.GetFromJsonAsync<IEnumerable<WeatherForecast>>("sample-data/weather.json", ComponentDetached) ?? new List<WeatherForecast>();

    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
